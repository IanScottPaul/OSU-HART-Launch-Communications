
simple_spi_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000015a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000690  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cee  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY
  6 .debug_info   000009f4  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096a  00000000  00000000  00001f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 6d 00 	call	0xda	; 0xda <main>
  bc:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <send>:
  c4:	0d b4       	in	r0, 0x2d	; 45
  c6:	07 fc       	sbrc	r0, 7
  c8:	02 c0       	rjmp	.+4      	; 0xce <send+0xa>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret
  ce:	8e bd       	out	0x2e, r24	; 46
  d0:	81 b3       	in	r24, 0x11	; 17
  d2:	80 95       	com	r24
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	08 95       	ret

000000da <main>:
#include <avr/io.h>
#include <stdbool.h>
#include <util/delay.h>
bool send(char);
int main(){
	DDRB 	= 0b00000111;
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	84 b9       	out	0x04, r24	; 4
	DDRF 	= 0XFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 bb       	out	0x10, r24	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	30 e7       	ldi	r19, 0x70	; 112
  e6:	42 e0       	ldi	r20, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	40 40       	sbci	r20, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0xe>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x18>
  f2:	00 00       	nop
	_delay_ms(100);
	PORTF 	= 0b11111111;
  f4:	81 bb       	out	0x11, r24	; 17
	PORTB   = 0b11111111; 
  f6:	85 b9       	out	0x05, r24	; 5
	bool looping = true;
	SPCR 	= 0b01010010;
  f8:	82 e5       	ldi	r24, 0x52	; 82
  fa:	8c bd       	out	0x2c, r24	; 44
	SPSR 	= (1<<7);
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	8d bd       	out	0x2d, r24	; 45
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	90 e7       	ldi	r25, 0x70	; 112
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	20 40       	sbci	r18, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x2c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x36>
 110:	00 00       	nop
	char a = 'a';
		//send(a);
		_delay_ms(100);
		PORTB = 0x00;
 112:	15 b8       	out	0x05, r1	; 5
		SPDR = a;
 114:	81 e6       	ldi	r24, 0x61	; 97
 116:	8e bd       	out	0x2e, r24	; 46
		while(1){
		if (bit_is_set(SPSR,7)){		
		SPDR = a;
 118:	21 e6       	ldi	r18, 0x61	; 97
		PORTF = 0;
		SPSR = SPSR & ~(1<<7);
		_delay_ms(50);
	}
		PORTF = 0XFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	0a c0       	rjmp	.+20     	; 0x132 <main+0x58>
 11e:	81 bb       	out	0x11, r24	; 17
 120:	3f ef       	ldi	r19, 0xFF	; 255
 122:	40 e7       	ldi	r20, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	31 50       	subi	r19, 0x01	; 1
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x4c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x56>
 130:	00 00       	nop
		//send(a);
		_delay_ms(100);
		PORTB = 0x00;
		SPDR = a;
		while(1){
		if (bit_is_set(SPSR,7)){		
 132:	0d b4       	in	r0, 0x2d	; 45
 134:	07 fe       	sbrs	r0, 7
 136:	f3 cf       	rjmp	.-26     	; 0x11e <main+0x44>
		SPDR = a;
 138:	2e bd       	out	0x2e, r18	; 46
		PORTF = 0;
 13a:	11 ba       	out	0x11, r1	; 17
		SPSR = SPSR & ~(1<<7);
 13c:	9d b5       	in	r25, 0x2d	; 45
 13e:	9f 77       	andi	r25, 0x7F	; 127
 140:	9d bd       	out	0x2d, r25	; 45
 142:	3f e7       	ldi	r19, 0x7F	; 127
 144:	48 e3       	ldi	r20, 0x38	; 56
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	31 50       	subi	r19, 0x01	; 1
 14a:	40 40       	sbci	r20, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x6e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x78>
 152:	00 00       	nop
 154:	e4 cf       	rjmp	.-56     	; 0x11e <main+0x44>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
